import java.nio.charset.Charset

import scalajsbundler.util.JSON

enablePlugins(ScalaJSBundlerPlugin)

name := "desktop-client"

scalacOptions += "-P:scalajs:sjsDefinedByDefault"

webpackBundlingMode := BundlingMode.LibraryOnly()

emitSourceMaps := true
webpackEmitSourceMaps := true

npmDevDependencies in Compile += "electron" -> "~1.7.8"

additionalNpmConfig in Compile += "name" -> JSON.str(name.value)
additionalNpmConfig in Compile += "main" -> JSON.str("main.js")
additionalNpmConfig in Compile += "scripts" -> JSON.objStr(Seq("start" -> "electron ."))


libraryDependencies ++= Seq(
  "org.scala-js"  %%% "scalajs-dom"      % "0.9.4",
  //"com.mscharley" %%% "scalajs-electron" % "0.3.0-SNAPSHOT",
  //"com.mscharley" %%% "scalajs-nodejs"   % "0.2.0-SNAPSHOT"
)

webpackConfigFile := Some(baseDirectory.value / "no-fs.webpack.config.js")


lazy val targetDir = settingKey[File]("node app base")

targetDir := (crossTarget in npmUpdate).value / "scalajs-bundler" / "main"

lazy val launcherFile = settingKey[File]("generated launcher")

launcherFile := targetDir.value / "main.js"

lazy val electron = taskKey[Unit]("compile and launch Electron")

lazy val createLauncher = taskKey[Unit]("create launcher files")

lazy val electronStart = taskKey[Unit]("launch Electron")

lazy val electronCompile = taskKey[Unit]("prepare and compile the Electron project")

lazy val cleanupUnused = taskKey[Unit]("cleanup unused entrypoints generated by scalajs-bundler")

artifactPath in (Compile, fastOptJS) := ((crossTarget in (Compile, fastOptJS)).value / ((moduleName in (Compile, fastOptJS)).value + ".js"))
artifactPath in (Compile, fullOptJS) := (artifactPath in (Compile, fastOptJS)).value

electronCompile in Compile := Def.sequential (
  webpack in (Compile, fastOptJS),
  createLauncher in Compile,
  cleanupUnused in Compile
).value

createLauncher in Compile := {
  val log = streams.value.log

  // Copy across other stuff we need
  IO.copyFile(sourceDirectory.value / "main" / "electron" / "index.html", targetDir.value / "index.html")

  // Create the launcher
  val file = launcherFile.value
  val code = s"""
                |'use strict';
                |//require("source-map-support").install();
                |require('./${name.value}-library');
                |var myApp = require('./${name.value}');
                |myApp.MyElectronApp.start(__dirname);
  """.stripMargin.trim

  log.info(s"Creating launcher ${file}")
  IO.write(file, code, Charset.forName("UTF-8"))
}

cleanupUnused in Compile := {
  IO.delete(targetDir.value / (name.value + "-entrypoint.js"))
  IO.delete(targetDir.value / (name.value + "-loader.js"))
}

electronStart := {
  launchElectron(targetDir.value, streams.value.log)
}

electron in Compile := {
  val x = (electronCompile in Compile).value
  launchElectron(targetDir.value, streams.value.log)
}

def launchElectron(targetDir: File, log: Logger) = {
  scalajsbundler.Npm.run("start")(targetDir, log)
}


